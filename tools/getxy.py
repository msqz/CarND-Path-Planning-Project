#!/usr/bin/env python3

import matplotlib.pyplot as plt
import math
import numpy as np
from scipy.interpolate import CubicSpline

TRACK_LENGTH = 6945.554

path = '../data/highway_map.csv'
data = []

with open(path) as f:
    for line in f.readlines():
        data.append([float(val) for val in line.split(' ')])

data = np.array(data)

def getXY(s, d, maps_s, maps_x, maps_y, maps_dx, maps_dy):
    s_idx = [i for i, s_wp in enumerate(maps_s) if s_wp >= s][0]
    wp_ahead = []
    wp_behind = []

    idx = s_idx
    while len(wp_ahead) < 20:
        idx = (idx + 1) % len(maps_s)
        wp_ahead.append(idx)

    idx = s_idx
    while len(wp_behind) < 10:
        idx = (idx - 1) % len(maps_s)
        wp_behind.append(idx)

    wp_behind.reverse()
    wp_indices = wp_behind + wp_ahead
    
    s_values = [maps_s[i] for i in wp_indices]
    # handle leap from track end to start
    s_max = s_values[-1]
    for i in range(len(s_values)):
        if s_values[i] > s_max:
            s_values[i] = s_values[i] - TRACK_LENGTH
  
    spline_s_x = CubicSpline(s_values, [maps_x[i] for i in wp_indices])
    spline_s_y = CubicSpline(s_values, [maps_y[i] for i in wp_indices])
    spline_s_dx = CubicSpline(s_values, [maps_dx[i] for i in wp_indices])
    spline_s_dy = CubicSpline(s_values, [maps_dy[i] for i in wp_indices])

    x = spline_s_x(s) + spline_s_dx(s) * d
    y = spline_s_y(s) + spline_s_dy(s) * d

    return x, y

# # 961.87, 1131.80
# print(getXY(176.77, 6.16, data[:, 2], data[:, 0], data[:, 1], data[:, 3], data[:, 4]))
# print('-----------------')
# # 963.08, 1131.60
# print(getXY(177.20, 6.16, data[:, 2], data[:, 0], data[:, 1], data[:, 3], data[:, 4]))


next_s = [148.2396895968, 148.5172791936, 148.7968687904, 149.0784583872, 149.362047984, 149.6476375808, 149.9352271776, 150.2248167744, 150.5164063712, 150.809995968, 151.1055855648, 151.4031751616, 151.7027647584, 152.0043543552, 152.307943952, 152.6135335488, 152.9211231456, 153.2307127424, 153.5423023392, 153.855891936, 154.1714815328, 154.4890711296, 154.8086607264, 155.1302503232, 155.45383992, 155.7794295168, 156.1070191136, 156.4366087104, 156.7681983072, 157.101787904, 157.4373775008, 157.7749670976, 158.1145566944, 158.4561462912, 158.799735888, 159.1453254848, 159.4929150816, 159.8425046784, 160.1940942752, 160.547683872, 160.9032734688, 161.2608630656, 161.6204526624, 161.9820422592, 162.345631856, 162.7112214528, 163.0788110496, 163.4484006464, 163.8199902432, 164.19357984,
          164.5691694368, 164.9467590336, 165.3263486304, 165.7079382272, 166.091527824, 166.4771174208, 166.8647070176, 167.2542966144, 167.6458862112, 168.039475808, 168.4350654048, 168.8326550016, 169.2322445984, 169.6338341952, 170.037423792, 170.4430133888, 170.8506029856, 171.2601925824, 171.6717821792, 172.085371776, 172.5009613728, 172.9185509696, 173.3381405664, 173.7597301632, 174.18331976, 174.6089093568, 175.0364989536, 175.4660885504, 175.8976781472, 176.331267744, 176.7668573408, 177.2044469376, 177.6440365344, 178.0856261312, 178.529215728, 178.9748053248, 179.4223949216, 179.8719845184, 180.3235741152, 180.777163712, 181.2327533088, 181.6903429056, 182.1499325024, 182.6115220992, 183.075111696, 183.5407012928, 184.0082908896, 184.4778804864, 184.9494700832, 185.42305968]
next_d


next_x = []
next_y = []

for i in range(len(next_s)):
    x, y = getXY(next_s[i], next_d[i], data[:, 2],
                 data[:, 0], data[:, 1], data[:, 3], data[:, 4])
    next_x.append(x)
    next_y.append(y)

plt.scatter(next_x, next_y)
min_x = min(next_x) - 5
max_x = max(next_x) + 5
min_y = min(next_y) - 10
max_y = max(next_y) + 10

for i in range(len(data)):
    if min_x <= data[i, 0] <= max_x and min_y <= data[i, 1] <= max_y:
        x_real = [data[i, 0], data[i, 0] + data[i, 3] * 8]
        y_real = [data[i, 1], data[i, 1] + data[i, 4] * 8]
        plt.plot(x_real, y_real, color='orange', linestyle='--')
        x_used = [data[i, 0], data[i, 0]]
        y_used = [data[i, 1], data[i, 1] - 8]
        plt.plot(x_used, y_used, color='red', linestyle='--')

        plt.scatter(data[i, 0], data[i, 1])
plt.show()
